// –ò–≥—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º—É—Å–æ—Ä–∞
class SortingGame {
    constructor() {
        this.gameArea = document.getElementById('game-area');
        this.trashSpawnArea = document.getElementById('trash-spawn-area');
        this.scoreElement = document.getElementById('score');
        this.containers = document.querySelectorAll('.container-btn');
        
        this.score = 0;
        this.spawnTimer = null;
        this.isDragging = false;
        this.currentDraggedElement = null;
        
        // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –º—É—Å–æ—Ä–∞
        this.activeTrashItems = [];
        this.nextTrashId = 0;
        this.maxTrashItems = 15;
        
        // –°–∏—Å—Ç–µ–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
        this.warningThreshold = 10;    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ 10+ –æ–±—ä–µ–∫—Ç–∞—Ö
        this.dangerThreshold = 12;     // –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –ø—Ä–∏ 12+ –æ–±—ä–µ–∫—Ç–∞—Ö
        this.overflowPenalty = 2;      // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–µ–∫—É–Ω–¥—É –≤ –æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω–µ
        this.lastPenaltyTime = 0;      // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à—Ç—Ä–∞—Ñ–∞
        this.penaltyInterval = 1000;   // –ò–Ω—Ç–µ—Ä–≤–∞–ª —à—Ç—Ä–∞—Ñ–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞)
        
        // –ë–æ–Ω—É—Å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
        
        // –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
        this.currentLevel = 1;
        this.maxLevel = 4;
        this.levelThresholds = [0, 100, 250, 450, 750]; // –û—á–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥. —É—Ä–æ–≤–µ–Ω—å (–º–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å 4)
        this.unlockedTypes = ['plastic', 'paper']; // –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ–ª—å–∫–æ —Å 2 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        

        
        // –°–∏—Å—Ç–µ–º–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        this.playerName = '';
        this.leaderboard = this.loadLeaderboard();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        this.saveLeaderboard();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        this.containerFillLevels = {
            plastic: 0,
            paper: 0,
            organic: 0,
            glass: 0,
            battery: 0
        };
        this.maxFillLevel = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        this.fillIncrement = 5;  // –ù–∞ —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∏–≥—Ä—ã
        this.correctAnswers = 0;
        this.baseSpawnInterval = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã
        this.currentSpawnInterval = this.baseSpawnInterval;
        this.gameStartTime = Date.now();
        
        // –ö–æ–º–±–æ-—Å–∏—Å—Ç–µ–º–∞
        this.comboCount = 0;
        this.maxCombo = 0;
        this.comboMultiplier = 1;
        
        // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.correctAnswersStreak = 0; // –°–µ—Ä–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥
        this.unlockedAchievements = [];
        this.achievements = [
            {
                id: 'nature_friend',
                name: '–î—Ä—É–≥ –ø—Ä–∏—Ä–æ–¥—ã',
                description: '10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥',
                icon: 'üèÖ',
                requirement: 10,
                unlocked: false
            },
            {
                id: 'master_sorter',
                name: '–ú–∞—Å—Ç–µ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
                description: '25 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥',
                icon: 'üõ°Ô∏è',
                requirement: 25,
                unlocked: false
            },
            {
                id: 'eco_warrior',
                name: '–≠–∫–æ-–≤–æ–∏–Ω',
                description: '40 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥',
                icon: 'üåü',
                requirement: 40,
                unlocked: false
            }
        ];
        
        // Web Audio API –¥–ª—è –∑–≤—É–∫–æ–≤
        this.audioContext = null;
        this.initAudio();
        
        // –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        this.ecoFacts = [
            {
                title: "–ü–ª–∞—Å—Ç–∏–∫ –∏ –æ–∫–µ–∞–Ω—ã",
                text: "–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ –æ–∫–µ–∞–Ω—ã –ø–æ–ø–∞–¥–∞–µ—Ç —Ü–µ–ª—ã–π –≥—Ä—É–∑–æ–≤–∏–∫ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–≥–æ –º—É—Å–æ—Ä–∞. –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ 1 —Ç–æ–Ω–Ω—ã –ø–ª–∞—Å—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏—Ç 2000 –ª–∏—Ç—Ä–æ–≤ –Ω–µ—Ñ—Ç–∏!"
            },
            {
                title: "–ë—É–º–∞–≥–∞ —Å–ø–∞—Å–∞–µ—Ç –¥–µ—Ä–µ–≤—å—è",
                text: "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ 1 —Ç–æ–Ω–Ω—ã –±—É–º–∞–≥–∏ —Å–ø–∞—Å–∞–µ—Ç 17 –¥–µ—Ä–µ–≤—å–µ–≤, —ç–∫–æ–Ω–æ–º–∏—Ç 26 000 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –∏ 4000 –∫–í—Ç¬∑—á —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏!"
            },
            {
                title: "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã",
                text: "–û—Ä–≥–∞–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 30% –≤—Å–µ—Ö –æ—Ç—Ö–æ–¥–æ–≤. –ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ –∏–∑ –Ω–µ—ë –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ª–∏—á–Ω—ã–π –∫–æ–º–ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Ç–µ–Ω–∏–π!"
            },
            {
                title: "–°—Ç–µ–∫–ª–æ - –≤–µ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
                text: "–°—Ç–µ–∫–ª–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞. –ò–∑ 1 –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –±—É—Ç—ã–ª–∫–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—Å—è —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –ª–∞–º–ø–æ—á–∫–∏ 4 —á–∞—Å–∞!"
            },
            {
                title: "–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã",
                text: "–ë–∞—Ç–∞—Ä–µ–π–∫–∏, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ —Ö–∏–º–∏–∫–∞—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏. –û–¥–Ω–∞ –±–∞—Ç–∞—Ä–µ–π–∫–∞ –∑–∞–≥—Ä—è–∑–Ω—è–µ—Ç 20 –∫–≤.–º –ø–æ—á–≤—ã –Ω–∞ –¥–µ—Å—è—Ç–∫–∏ –ª–µ—Ç!"
            }
        ];

        // –§–∞–∫—Ç—ã –¥–Ω—è –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        this.dailyFacts = [
            {
                title: "–í–µ–ª–∏–∫–æ–µ —Ç–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–µ –º—É—Å–æ—Ä–Ω–æ–µ –ø—è—Ç–Ω–æ",
                text: "–í –¢–∏—Ö–æ–º –æ–∫–µ–∞–Ω–µ –ø–ª–∞–≤–∞–µ—Ç –æ—Å—Ç—Ä–æ–≤ –∏–∑ –ø–ª–∞—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º —Å 3 –§—Ä–∞–Ω—Ü–∏–∏! –û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 80 000 —Ç–æ–Ω–Ω –º—É—Å–æ—Ä–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞—Å—Ç–∏.",
                icon: "üåä"
            },
            {
                title: "–ú–∏–∫—Ä–æ–ø–ª–∞—Å—Ç–∏–∫ –≤ –Ω–∞—à–µ–π –µ–¥–µ",
                text: "–°—Ä–µ–¥–Ω–∏–π —á–µ–ª–æ–≤–µ–∫ —Å—ä–µ–¥–∞–µ—Ç 5 –≥—Ä–∞–º–º–æ–≤ –ø–ª–∞—Å—Ç–∏–∫–∞ –≤ –Ω–µ–¥–µ–ª—é - —ç—Ç–æ –∫–∞–∫ –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞! –ú–∏–∫—Ä–æ–ø–ª–∞—Å—Ç–∏–∫ –Ω–∞–π–¥–µ–Ω –¥–∞–∂–µ –≤ –ø–∏—Ç—å–µ–≤–æ–π –≤–æ–¥–µ.",
                icon: "üçΩÔ∏è"
            },
            {
                title: "–í—Ç–æ—Ä–∞—è –∂–∏–∑–Ω—å –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –±—É—Ç—ã–ª–æ–∫",
                text: "–ò–∑ 25 –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –±—É—Ç—ã–ª–æ–∫ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω—É —Ñ–ª–∏—Å–æ–≤—É—é –∫—É—Ä—Ç–∫—É, –∞ –∏–∑ 35 –±—É—Ç—ã–ª–æ–∫ - –¥–µ—Ç—Å–∫–æ–µ –∞–≤—Ç–æ–∫—Ä–µ—Å–ª–æ!",
                icon: "‚ôªÔ∏è"
            },
            {
                title: "–ë—É–º–∞–≥–∞ –ø—Ä–æ—Ç–∏–≤ –ø–ª–∞–Ω—à–µ—Ç–æ–≤",
                text: "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ–¥–Ω–æ–≥–æ –ø–ª–∞–Ω—à–µ—Ç–∞ –∑–∞–≥—Ä—è–∑–Ω—è–µ—Ç –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É –∫–∞–∫ 24 –∫–≥ –±—É–º–∞–≥–∏. –ù–æ –ø–ª–∞–Ω—à–µ—Ç –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å —Ç—ã—Å—è—á–∏ –ª–∏—Å—Ç–æ–≤!",
                icon: "üì±"
            },
            {
                title: "–ö–æ–º–ø–æ—Å—Ç - –∑–æ–ª–æ—Ç–æ –¥–ª—è –ø–æ—á–≤—ã",
                text: "1 —Ç–æ–Ω–Ω–∞ –ø–∏—â–µ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ 200 –∫–≥ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω—è–µ—Ç —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è.",
                icon: "üå±"
            },
            {
                title: "–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –º–∞–≥–∏—è",
                text: "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–µ–∫–ª–∞ —ç–∫–æ–Ω–æ–º–∏—Ç 25-32% —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º –Ω–æ–≤–æ–≥–æ. –°—Ç–µ–∫–ª–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–µ—á–Ω–æ!",
                icon: "üçæ"
            },
            {
                title: "–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã",
                text: "–ë–∞—Ç–∞—Ä–µ–π–∫–∏, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏ —Ö–∏–º–∏–∫–∞—Ç—ã –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤ –æ–±—ã—á–Ω—ã–π –º—É—Å–æ—Ä - –æ–Ω–∏ –∑–∞–≥—Ä—è–∑–Ω—è—é—Ç –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É!",
                icon: "‚ö†Ô∏è"
            },
            {
                title: "–ü—Ä–∞–≤–∏–ª–æ 3R",
                text: "Reduce (—Å–æ–∫—Ä–∞—â–∞–π), Reuse (–∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–≤—Ç–æ—Ä–Ω–æ), Recycle (–ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–π) - —Ç—Ä–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏.",
                icon: "üîÑ"
            },
            {
                title: "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–∞ –∏ –ø–ª–∞–Ω–µ—Ç–∞",
                text: "–ò–Ω–¥—É—Å—Ç—Ä–∏—è –º–æ–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç 20% –≤—Å–µ—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Å—Ç–æ—á–Ω—ã—Ö –≤–æ–¥. –ü–æ–∫—É–ø–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ–¥–µ–∂–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Å–ª—É–∂–∏—Ç –¥–æ–ª—å—à–µ!",
                icon: "üëï"
            },
            {
                title: "–¶–∏—Ñ—Ä–æ–≤–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ",
                text: "–û—Ç–ø—Ä–∞–≤–∫–∞ 65 —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º = 1 –∫–º –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º—É —Å–ª–µ–¥—É. –£–¥–∞–ª—è–π –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∏—Å—å–º–∞!",
                icon: "üìß"
            },
            {
                title: "–õ–µ—Å–∞ - –ª–µ–≥–∫–∏–µ –ø–ª–∞–Ω–µ—Ç—ã",
                text: "–ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤—ã—Ä—É–±–∞–µ—Ç—Å—è —É—á–∞—Å—Ç–æ–∫ –ª–µ—Å–∞ —Ä–∞–∑–º–µ—Ä–æ–º —Å —Ñ—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ. –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –±—É–º–∞–≥–∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ä–µ–≤—å—è!",
                icon: "üå≥"
            },
            {
                title: "–≠–Ω–µ—Ä–≥–∏—è –∏–∑ –º—É—Å–æ—Ä–∞",
                text: "–í –®–≤–µ—Ü–∏–∏ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç 99% –±—ã—Ç–æ–≤—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤ - —á–∞—Å—Ç—å —Å–∂–∏–≥–∞—é—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —ç–Ω–µ—Ä–≥–∏–∏, —á–∞—Å—Ç—å –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç –≤ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã.",
                icon: "‚ö°"
            },
            {
                title: "–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –æ—Å—Ç—Ä–æ–≤–∞",
                text: "–í –º–∏—Ä–æ–≤–æ–º –æ–∫–µ–∞–Ω–µ –¥—Ä–µ–π—Ñ—É–µ—Ç 5 –≥–∏–≥–∞–Ω—Ç—Å–∫–∏—Ö –º—É—Å–æ—Ä–Ω—ã—Ö –ø—è—Ç–µ–Ω. –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –≤ 2 —Ä–∞–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –¢–µ—Ö–∞—Å–∞!",
                icon: "üèùÔ∏è"
            },
            {
                title: "–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –±–∞–Ω–∫–∏-—á–µ–º–ø–∏–æ–Ω—ã",
                text: "–ê–ª—é–º–∏–Ω–∏–µ–≤–∞—è –±–∞–Ω–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ –∑–∞ 60 –¥–Ω–µ–π –∏ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–æ–≤–æ–π –±–∞–Ω–∫–æ–π –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑!",
                icon: "ü•§"
            },
            {
                title: "–ú—É—Å–æ—Ä–Ω—ã–µ –≥–æ—Ä—ã",
                text: "–ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ–∫–æ–ª–æ 4.5 –∫–≥ –º—É—Å–æ—Ä–∞ –≤ –¥–µ–Ω—å. –ó–∞ –≥–æ–¥ —ç—Ç–æ —Ü–µ–ª–∞—è –≥–æ—Ä–∞ –≤—ã—Å–æ—Ç–æ–π —Å —Ç—Ä–µ—Ö—ç—Ç–∞–∂–Ω—ã–π –¥–æ–º!",
                icon: "üóëÔ∏è"
            }
        ];
        
        // –í—Ä–µ–º—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≤ –≥–æ–¥–∞—Ö)
        this.decompositionTime = {
            plastic: { min: 450, max: 1000, unit: "–ª–µ—Ç" },
            paper: { min: 2, max: 5, unit: "–º–µ—Å—è—Ü–µ–≤" },
            organic: { min: 1, max: 6, unit: "–º–µ—Å—è—Ü–µ–≤" },
            glass: { min: 1000000, max: 1000000, unit: "–ª–µ—Ç" },
            battery: { min: 100, max: 1000, unit: "–ª–µ—Ç" }
        };
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        this.recyclingStats = {
            totalItemsSorted: 0,
            itemsByType: {
                plastic: 0,
                paper: 0,
                organic: 0,
                glass: 0,
                battery: 0
            }
        };
        
        // Touch events –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.touchStartPos = { x: 0, y: 0 };
        this.originalTrashPosition = { x: 0, y: 0 };
        
        // –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –º—É—Å–æ—Ä–∞
        this.trashTypes = [
            // –ü–ª–∞—Å—Ç–∏–∫
            { emoji: 'üçº', type: 'plastic', name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –±—É—Ç—ã–ª–∫–∞' },
            { emoji: 'ü•§', type: 'plastic', name: '–°—Ç–∞–∫–∞–Ω –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤' },
            { emoji: 'üõçÔ∏è', type: 'plastic', name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –ø–∞–∫–µ—Ç' },
            { emoji: 'üß¥', type: 'plastic', name: '–ë—É—Ç—ã–ª–∫–∞ —à–∞–º–ø—É–Ω—è' },
            { emoji: 'üì¶', type: 'plastic', name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —É–ø–∞–∫–æ–≤–∫–∞' },
            
            // –ë—É–º–∞–≥–∞
            { emoji: 'üì∞', type: 'paper', name: '–ì–∞–∑–µ—Ç–∞' },
            { emoji: 'üìÑ', type: 'paper', name: '–õ–∏—Å—Ç –±—É–º–∞–≥–∏' },
            { emoji: 'üìö', type: 'paper', name: '–ö–Ω–∏–≥–∞' },
            { emoji: 'üìã', type: 'paper', name: '–ö–∞—Ä—Ç–æ–Ω–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞' },
            { emoji: 'üé´', type: 'paper', name: '–ë–∏–ª–µ—Ç' },
            
            // –û—Ä–≥–∞–Ω–∏–∫–∞
            { emoji: 'üçå', type: 'organic', name: '–ë–∞–Ω–∞–Ω' },
            { emoji: 'üçé', type: 'organic', name: '–Ø–±–ª–æ–∫–æ' },
            { emoji: 'ü•ï', type: 'organic', name: '–ú–æ—Ä–∫–æ–≤—å' },
            { emoji: 'üçÉ', type: 'organic', name: '–õ–∏—Å—Ç—å—è' },
            { emoji: 'üåΩ', type: 'organic', name: '–ö—É–∫—É—Ä—É–∑–∞' },
            { emoji: 'ü•î', type: 'organic', name: '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å' },
            
            // –£—Ä–æ–≤–µ–Ω—å 2 - –°—Ç–µ–∫–ª–æ
            { emoji: 'üçæ', type: 'glass', name: '–°—Ç–µ–∫–ª—è–Ω–Ω–∞—è –±—É—Ç—ã–ª–∫–∞' },
            { emoji: 'üå°Ô∏è', type: 'glass', name: '–¢–µ—Ä–º–æ–º–µ—Ç—Ä' },
            { emoji: 'üí°', type: 'glass', name: '–õ–∞–º–ø–æ—á–∫–∞' },
            { emoji: 'üç∑', type: 'glass', name: '–ë–æ–∫–∞–ª' },
            { emoji: 'ü•É', type: 'glass', name: '–°—Ç–∞–∫–∞–Ω' },
            
            // –£—Ä–æ–≤–µ–Ω—å 3 - –ë–∞—Ç–∞—Ä–µ–π–∫–∏ –∏ –æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã
            { emoji: 'üîã', type: 'battery', name: '–ë–∞—Ç–∞—Ä–µ–π–∫–∞' },
            { emoji: 'ü™´', type: 'battery', name: '–†–∞–∑—Ä—è–∂–µ–Ω–Ω–∞—è –±–∞—Ç–∞—Ä–µ–π–∫–∞' },
            { emoji: 'üîå', type: 'battery', name: '–ó–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ' },
            { emoji: 'üíä', type: 'battery', name: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞' },
            { emoji: '‚öóÔ∏è', type: 'battery', name: '–•–∏–º–∏–∫–∞—Ç—ã' },
            { emoji: 'üß¥', type: 'battery', name: '–û–ø–∞—Å–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å' }
            

        ];
        
        // –ë–æ–Ω—É—Å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —É–±—Ä–∞–Ω—ã
        
        this.init();
    }

    async initAudio() {
        try {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        } catch (error) {
            console.warn('Web Audio API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', error);
        }
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —É—Å–ø–µ—Ö–∞
    playSuccessSound() {
        if (!this.audioContext) return;
        
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        // –ú–µ–ª–æ–¥–∏—á–Ω—ã–π –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞
        oscillator.frequency.setValueAtTime(523.25, this.audioContext.currentTime); // C5
        oscillator.frequency.setValueAtTime(659.25, this.audioContext.currentTime + 0.1); // E5
        oscillator.frequency.setValueAtTime(783.99, this.audioContext.currentTime + 0.2); // G5
        
        gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.3);
        
        oscillator.start();
        oscillator.stop(this.audioContext.currentTime + 0.3);
    }

    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –æ—à–∏–±–∫–∏
    playErrorSound() {
        if (!this.audioContext) return;
        
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        // –ù–∏–∑–∫–∏–π –∑–≤—É–∫ –æ—à–∏–±–∫–∏
        oscillator.frequency.setValueAtTime(220, this.audioContext.currentTime); // A3
        oscillator.frequency.setValueAtTime(196, this.audioContext.currentTime + 0.15); // G3
        
        gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.3);
        
        oscillator.start();
        oscillator.stop(this.audioContext.currentTime + 0.3);
    }

    // –ó–≤—É–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    playSpawnSound() {
        if (!this.audioContext) return;
        
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        oscillator.frequency.setValueAtTime(400, this.audioContext.currentTime);
        oscillator.frequency.setValueAtTime(600, this.audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(0.2, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.15);
        
        oscillator.start();
        oscillator.stop(this.audioContext.currentTime + 0.15);
    }

    // –ó–≤—É–∫ —Ç—Ä–µ–≤–æ–≥–∏ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
    playOverflowWarningSound() {
        if (!this.audioContext) return;
        
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(this.audioContext.destination);
        
        // –¢—Ä–µ–≤–æ–∂–Ω—ã–π –∑–≤—É–∫ - –Ω–∏–∑–∫–∏–π –≥—É–¥–æ–∫
        oscillator.frequency.setValueAtTime(150, this.audioContext.currentTime);
        oscillator.frequency.setValueAtTime(200, this.audioContext.currentTime + 0.2);
        oscillator.frequency.setValueAtTime(150, this.audioContext.currentTime + 0.4);
        
        gainNode.gain.setValueAtTime(0.25, this.audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.5);
        
        oscillator.start();
        oscillator.stop(this.audioContext.currentTime + 0.5);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü —É—Å–ø–µ—Ö–∞ (–∏—Å–∫—Ä—ã)
    createSuccessParticles(x, y) {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —á–∞—Å—Ç–∏—Ü –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        this.createSparkParticles(x, y);
        this.createStarParticles(x, y);
        this.createGlowParticles(x, y);
    }

    // –ò—Å–∫—Ä—ã - –æ—Å–Ω–æ–≤–Ω—ã–µ —è—Ä–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã
    createSparkParticles(x, y) {
        const colors = ['#2ecc71', '#27ae60', '#f1c40f', '#f39c12', '#fff'];
        const particleCount = 12;
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle spark-particle';
            particle.style.position = 'fixed';
            particle.style.left = x + 'px';
            particle.style.top = y + 'px';
            
            // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            const size = 4 + Math.random() * 6;
            particle.style.width = size + 'px';
            particle.style.height = size + 'px';
            
            const color = colors[Math.floor(Math.random() * colors.length)];
            particle.style.backgroundColor = color;
            particle.style.boxShadow = `0 0 ${size * 2}px ${color}`;
            particle.style.borderRadius = '50%';
            particle.style.pointerEvents = 'none';
            particle.style.zIndex = '9999';
            
            // –†–∞–¥–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–ª–µ—Ç
            const angle = (Math.PI * 2 * i) / particleCount + Math.random() * 0.3;
            const velocity = 40 + Math.random() * 50;
            const vx = Math.cos(angle) * velocity;
            const vy = Math.sin(angle) * velocity;
            
            particle.style.setProperty('--vx', vx + 'px');
            particle.style.setProperty('--vy', vy + 'px');
            particle.style.setProperty('--rotation', Math.random() * 360 + 'deg');
            
            document.body.appendChild(particle);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            particle.style.animation = 'sparkParticle 1s ease-out forwards';
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 1000);
        }
    }

    // –ó–≤–µ–∑–¥–æ—á–∫–∏ - –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    createStarParticles(x, y) {
        const starSymbols = ['‚ú®', '‚≠ê', 'üåü', 'üí´'];
        const particleCount = 4;
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle star-particle';
            particle.style.position = 'fixed';
            particle.style.left = x + 'px';
            particle.style.top = y + 'px';
            particle.style.fontSize = (12 + Math.random() * 8) + 'px';
            particle.innerHTML = starSymbols[Math.floor(Math.random() * starSymbols.length)];
            particle.style.pointerEvents = 'none';
            particle.style.zIndex = '9998';
            particle.style.color = '#fff';
            particle.style.textShadow = '0 0 10px #f1c40f';
            
            // –ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–æ–¥—ä–µ–º —Å –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
            const offsetX = (Math.random() - 0.5) * 60;
            const offsetY = -30 - Math.random() * 40;
            
            particle.style.setProperty('--vx', offsetX + 'px');
            particle.style.setProperty('--vy', offsetY + 'px');
            particle.style.setProperty('--rotation', Math.random() * 360 + 'deg');
            
            document.body.appendChild(particle);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            particle.style.animation = 'starParticle 1.5s ease-out forwards';
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 1500);
        }
    }

    // –°–∏—è—é—â–∏–µ –∫–æ–ª—å—Ü–∞
    createGlowParticles(x, y) {
        const colors = ['rgba(46, 204, 113, 0.6)', 'rgba(241, 196, 15, 0.6)', 'rgba(255, 255, 255, 0.4)'];
        const ringCount = 3;
        
        for (let i = 0; i < ringCount; i++) {
            const ring = document.createElement('div');
            ring.className = 'particle glow-particle';
            ring.style.position = 'fixed';
            ring.style.left = (x - 20) + 'px';
            ring.style.top = (y - 20) + 'px';
            ring.style.width = '40px';
            ring.style.height = '40px';
            ring.style.border = `2px solid ${colors[i % colors.length]}`;
            ring.style.borderRadius = '50%';
            ring.style.pointerEvents = 'none';
            ring.style.zIndex = '9997';
            ring.style.animationDelay = (i * 0.2) + 's';
            
            document.body.appendChild(ring);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            ring.style.animation = 'glowRing 1s ease-out forwards';
            setTimeout(() => {
                if (ring.parentNode) {
                    ring.parentNode.removeChild(ring);
                }
            }, 1000 + (i * 200));
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –æ—à–∏–±–∫–∏ (–¥—ã–º)
    createErrorParticles(x, y) {
        const particleCount = 6;
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle error-particle';
            particle.style.position = 'fixed';
            particle.style.left = (x - 10 + Math.random() * 20) + 'px';
            particle.style.top = (y - 10 + Math.random() * 20) + 'px';
            particle.style.width = (8 + Math.random() * 6) + 'px';
            particle.style.height = (8 + Math.random() * 6) + 'px';
            particle.style.backgroundColor = '#95a5a6';
            particle.style.borderRadius = '50%';
            particle.style.pointerEvents = 'none';
            particle.style.zIndex = '9999';
            particle.style.opacity = '0.7';
            
            // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ä–∞–∑–±—Ä–æ—Å–æ–º
            const vx = (Math.random() - 0.5) * 20;
            const vy = -30 - Math.random() * 20;
            
            particle.style.setProperty('--vx', vx + 'px');
            particle.style.setProperty('--vy', vy + 'px');
            
            document.body.appendChild(particle);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            particle.style.animation = 'particleError 1.2s ease-out forwards';
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 1200);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∑—Ä—ã–≤–∞ –ø—Ä–∏ –∫–æ–º–±–æ
    createComboExplosion(x, y, multiplier) {
        const colors = ['#e74c3c', '#f39c12', '#f1c40f', '#ffffff'];
        const particleCount = multiplier * 4; // –ë–æ–ª—å—à–µ —á–∞—Å—Ç–∏—Ü –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–º–±–æ
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle combo-particle';
            particle.style.position = 'fixed';
            particle.style.left = x + 'px';
            particle.style.top = y + 'px';
            particle.style.width = (4 + Math.random() * 4) + 'px';
            particle.style.height = (4 + Math.random() * 4) + 'px';
            particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            particle.style.borderRadius = '50%';
            particle.style.pointerEvents = 'none';
            particle.style.zIndex = '9999';
            particle.style.boxShadow = '0 0 6px currentColor';
            
            // –†–∞–¥–∏–∞–ª—å–Ω—ã–π –≤–∑—Ä—ã–≤
            const angle = Math.random() * Math.PI * 2;
            const velocity = 40 + Math.random() * 60;
            const vx = Math.cos(angle) * velocity;
            const vy = Math.sin(angle) * velocity;
            
            particle.style.setProperty('--vx', vx + 'px');
            particle.style.setProperty('--vy', vy + 'px');
            
            document.body.appendChild(particle);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            particle.style.animation = 'particleCombo 1s ease-out forwards';
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 1000);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    createSpawnParticles(x, y) {
        const colors = ['#3498db', '#9b59b6', '#1abc9c'];
        const particleCount = 4;
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle spawn-particle';
            particle.style.position = 'fixed';
            particle.style.left = x + 'px';
            particle.style.top = y + 'px';
            particle.style.width = '4px';
            particle.style.height = '4px';
            particle.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            particle.style.borderRadius = '50%';
            particle.style.pointerEvents = 'none';
            particle.style.zIndex = '9999';
            
            // –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–¥–∏—É—Å —Ä–∞–∑–ª–µ—Ç–∞
            const angle = (Math.PI * 2 * i) / particleCount;
            const velocity = 20 + Math.random() * 15;
            const vx = Math.cos(angle) * velocity;
            const vy = Math.sin(angle) * velocity;
            
            particle.style.setProperty('--vx', vx + 'px');
            particle.style.setProperty('--vy', vy + 'px');
            
            document.body.appendChild(particle);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
            particle.style.animation = 'particleSpawn 0.6s ease-out forwards';
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 600);
        }
    }

    init() {
        console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        this.setupEventListeners();
        this.updateLevelDisplay();
        this.initializeContainerFills();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è 1-–≥–æ —É—Ä–æ–≤–Ω—è
        this.updateColorScheme();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.initAtmosphericEffects();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –¥–Ω—è, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        this.showDailyFact();
    }

    setupEventListeners() {
        // Drag and Drop –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        this.setupDesktopDragAndDrop();

        // –í–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.addEventListener('click', () => {
            if (this.audioContext && this.audioContext.state === 'suspended') {
                this.audioContext.resume();
            }
        }, { once: true });
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
        const leaderboardBtn = document.getElementById('leaderboard-btn');
        const gameOverBtn = document.getElementById('game-over-btn');

        if (leaderboardBtn) {
            leaderboardBtn.addEventListener('click', () => {
                this.showLeaderboard();
            });
        }
        
        if (gameOverBtn) {
            gameOverBtn.addEventListener('click', () => {
                this.endGame();
            });
        }
        

    }

    setupDesktopDragAndDrop() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drop-–∑–æ–Ω –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        this.containers.forEach(container => {
            container.addEventListener('dragover', (e) => {
                e.preventDefault();
                e.dataTransfer.dropEffect = 'move';
                if (this.isDragging) {
                    container.classList.add('drag-over');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if (!container.querySelector('.container-glow')) {
                        const glow = document.createElement('div');
                        glow.className = 'container-glow';
                        container.appendChild(glow);
                    }
                }
            });

            container.addEventListener('dragleave', (e) => {
                container.classList.remove('drag-over');
                const glow = container.querySelector('.container-glow');
                if (glow) glow.remove();
            });

            container.addEventListener('drop', (e) => {
                e.preventDefault();
                container.classList.remove('drag-over');
                const glow = container.querySelector('.container-glow');
                if (glow) glow.remove();
                
                if (this.isDragging) {
                    const droppedType = e.dataTransfer.getData('text/plain');
                    const droppedId = e.dataTransfer.getData('text/id');
                    // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã drop
                    this.checkAnswer(container.dataset.type, droppedId, e.clientX, e.clientY);
                }
            });
        });
    }

    highlightContainerUnderTouch(x, y) {
        this.clearContainerHighlights();
        const container = this.getContainerUnderTouch(x, y);
        if (container) {
            container.classList.add('drag-over');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if (!container.querySelector('.container-glow')) {
                const glow = document.createElement('div');
                glow.className = 'container-glow';
                container.appendChild(glow);
            }
        }
    }

    getContainerUnderTouch(x, y) {
        for (let container of this.containers) {
            const rect = container.getBoundingClientRect();
            if (x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom) {
                return container;
            }
        }
        return null;
    }

    clearContainerHighlights() {
        this.containers.forEach(container => {
            container.classList.remove('drag-over');
            const glow = container.querySelector('.container-glow');
            if (glow) glow.remove();
        });
    }

    startSpawning() {
        // –ü–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            this.spawnTrash();
        }, 1000);
        
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã
        this.scheduleNextSpawn();
    }

    scheduleNextSpawn() {
        this.spawnTimer = setTimeout(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            if (this.activeTrashItems.length < this.maxTrashItems) {
                this.spawnTrash();
            }
            this.scheduleNextSpawn();
        }, this.currentSpawnInterval);
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
    startOverflowMonitoring() {
        setInterval(() => {
            this.checkOverflow();
        }, 500); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤
    checkOverflow() {
        const itemCount = this.activeTrashItems.length;
        const currentTime = Date.now();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–æ–Ω—ã
        this.updateSpawnAreaState(itemCount);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã –≤ –æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω–µ
        if (itemCount >= this.dangerThreshold) {
            if (currentTime - this.lastPenaltyTime >= this.penaltyInterval) {
                this.applyOverflowPenalty();
                this.lastPenaltyTime = currentTime;
            }
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ –∑–≤—É–∫–∏
        if (itemCount === this.warningThreshold) {
            this.playOverflowWarningSound();
            this.showFeedback('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ú–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞!', 'info');
        } else if (itemCount === this.dangerThreshold) {
            this.playOverflowWarningSound();
            this.showFeedback('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ! –®—Ç—Ä–∞—Ñ—ã!', 'error');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–æ–Ω—ã —Å–ø–∞–≤–Ω–∞
    updateSpawnAreaState(itemCount) {
        const spawnArea = this.trashSpawnArea;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –º—É—Å–æ—Ä–∞
        this.updateTrashCounter();
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        spawnArea.classList.remove('warning', 'danger');
        
        if (itemCount >= this.dangerThreshold) {
            spawnArea.classList.add('danger');
        } else if (itemCount >= this.warningThreshold) {
            spawnArea.classList.add('warning');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –º—É—Å–æ—Ä–∞
    updateTrashCounter() {
        const trashCountElement = document.getElementById('trash-count');
        if (trashCountElement) {
            trashCountElement.textContent = this.activeTrashItems.length;
            
            // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if (this.activeTrashItems.length >= this.dangerThreshold) {
                trashCountElement.style.color = '#e74c3c';
            } else if (this.activeTrashItems.length >= this.warningThreshold) {
                trashCountElement.style.color = '#f39c12';
            } else {
                trashCountElement.style.color = '#2c3e50';
            }
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
    applyOverflowPenalty() {
        this.score = Math.max(0, this.score - this.overflowPenalty);
        this.comboCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ
        this.comboMultiplier = 1;
        
        this.updateScore();
        this.updateComboDisplay();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —à—Ç—Ä–∞—Ñ–µ
        this.showFeedback(`üìâ –®—Ç—Ä–∞—Ñ –∑–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ: -${this.overflowPenalty} –æ—á–∫–æ–≤!`, 'error');
        
        console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω —à—Ç—Ä–∞—Ñ –∑–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ:', this.overflowPenalty, '–æ—á–∫–æ–≤. –û–±—ä–µ–∫—Ç–æ–≤:', this.activeTrashItems.length);
    }

    updateGameSpeed() {
        // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        const speedLevel = Math.floor(this.correctAnswers / 5);
        const speedMultiplier = Math.max(0.3, 1 - (speedLevel * 0.1)); // –ú–∏–Ω–∏–º—É–º 30% –æ—Ç –±–∞–∑–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        this.currentSpawnInterval = Math.floor(this.baseSpawnInterval * speedMultiplier);
        
        if (speedLevel > 0) {
            console.log(`–£—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏: ${speedLevel}, –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${this.currentSpawnInterval}–º—Å`);
        }
    }

    spawnTrash() {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –º—É—Å–æ—Ä–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        const availableTrash = this.trashTypes.filter(item => 
            this.unlockedTypes.includes(item.type)
        );
        const randomIndex = Math.floor(Math.random() * availableTrash.length);
        const trashData = availableTrash[randomIndex];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        const trashElement = this.createTrashItem(trashData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–æ–Ω—É —Å–ø–∞–≤–Ω–∞ –∏ –≤ –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.trashSpawnArea.appendChild(trashElement);
        this.activeTrashItems.push({
            element: trashElement,
            data: trashData,
            id: trashElement.dataset.id
        });
        
        // –ó–≤—É–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.playSpawnSound();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        this.updateTrashCounter();
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è (–º–∞–ª–µ–Ω—å–∫–∏–µ –∏—Å–∫—Ä—ã)
        setTimeout(() => {
            const rect = trashElement.getBoundingClientRect();
            const centerX = rect.left + rect.width / 2;
            const centerY = rect.top + rect.height / 2;
            this.createSpawnParticles(centerX, centerY);
        }, 200);
        
        // –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –±–æ–Ω—É—Å–æ–≤
        
        console.log('–ü–æ—è–≤–∏–ª—Å—è –æ–±—ä–µ–∫—Ç:', trashData.name, '–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤:', this.activeTrashItems.length);
    }

    // –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –æ—á–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–±–æ
    getComboMultiplier() {
        if (this.comboCount >= 10) return 5;    // 10+ –∫–æ–º–±–æ = x5
        if (this.comboCount >= 7) return 3;     // 7-9 –∫–æ–º–±–æ = x3  
        if (this.comboCount >= 4) return 2;     // 4-6 –∫–æ–º–±–æ = x2
        return 1;                               // 0-3 –∫–æ–º–±–æ = x1
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º—É—Å–æ—Ä–∞
    createTrashItem(trashData) {
        const trashElement = document.createElement('div');
        trashElement.className = 'trash-item spawn-animation';
        trashElement.innerHTML = trashData.emoji;
        trashElement.title = trashData.name;
        trashElement.draggable = true;
        trashElement.dataset.type = trashData.type;
        trashElement.dataset.id = this.nextTrashId++;
        

        
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–æ–Ω—ã
        const position = this.getRandomPosition();
        trashElement.style.position = 'absolute';
        trashElement.style.left = position.x + 'px';
        trashElement.style.top = position.y + 'px';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        this.setTrashItemColor(trashElement, trashData.type);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupTrashItemEvents(trashElement);
        
        return trashElement;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–æ–Ω—ã —Å–ø–∞–≤–Ω–∞
    getRandomPosition() {
        const spawnArea = this.trashSpawnArea;
        const spawnRect = spawnArea.getBoundingClientRect();
        
        // –†–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞ –º—É—Å–æ—Ä–∞
        const itemSize = 80;
        const margin = 10;
        
        // –î–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        const maxX = spawnArea.clientWidth - itemSize - margin * 2;
        const maxY = spawnArea.clientHeight - itemSize - margin * 2;
        
        return {
            x: margin + Math.random() * Math.max(0, maxX),
            y: margin + Math.random() * Math.max(0, maxY)
        };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –º—É—Å–æ—Ä–∞
    setTrashItemColor(element, type) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –≥—Ä—è–∑–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞
        element.classList.add('dirty-trash', `dirty-${type}`);
        
        switch(type) {
            case 'plastic':
                element.style.background = `
                    radial-gradient(circle at 20% 30%, rgba(101, 67, 33, 0.4) 8%, transparent 20%),
                    radial-gradient(circle at 80% 70%, rgba(139, 69, 19, 0.3) 12%, transparent 25%),
                    radial-gradient(circle at 45% 15%, rgba(160, 82, 45, 0.2) 6%, transparent 18%),
                    linear-gradient(135deg, rgba(41, 128, 185, 0.6) 0%, rgba(52, 152, 219, 0.4) 40%, rgba(30, 100, 150, 0.7) 100%)
                `;
                element.style.border = '2px solid rgba(30, 100, 150, 0.6)';
                break;
            case 'paper':
                element.style.background = `
                    radial-gradient(circle at 15% 25%, rgba(101, 67, 33, 0.5) 10%, transparent 22%),
                    radial-gradient(circle at 75% 80%, rgba(139, 69, 19, 0.4) 8%, transparent 20%),
                    radial-gradient(circle at 60% 10%, rgba(205, 133, 63, 0.3) 12%, transparent 28%),
                    linear-gradient(45deg, rgba(218, 165, 32, 0.8) 0%, rgba(184, 134, 11, 0.9) 60%, rgba(160, 120, 20, 0.7) 100%)
                `;
                element.style.border = '2px solid rgba(160, 120, 20, 0.8)';
                break;
            case 'organic':
                element.style.background = `
                    radial-gradient(circle at 25% 35%, rgba(101, 67, 33, 0.6) 12%, transparent 25%),
                    radial-gradient(circle at 70% 20%, rgba(139, 69, 19, 0.5) 10%, transparent 22%),
                    radial-gradient(circle at 40% 85%, rgba(85, 107, 47, 0.4) 15%, transparent 30%),
                    linear-gradient(200deg, rgba(34, 139, 34, 0.5) 0%, rgba(85, 107, 47, 0.7) 50%, rgba(107, 142, 35, 0.6) 100%)
                `;
                element.style.border = '2px solid rgba(85, 107, 47, 0.8)';
                break;
            case 'glass':
                element.style.background = `
                    linear-gradient(45deg, rgba(220, 220, 220, 0.1) 0%, transparent 20%),
                    linear-gradient(135deg, transparent 40%, rgba(200, 200, 200, 0.2) 60%),
                    radial-gradient(circle at 30% 40%, rgba(169, 169, 169, 0.3) 5%, transparent 15%),
                    radial-gradient(circle at 80% 30%, rgba(105, 105, 105, 0.2) 8%, transparent 20%),
                    linear-gradient(200deg, rgba(176, 196, 222, 0.4) 0%, rgba(135, 206, 235, 0.3) 100%)
                `;
                element.style.border = '2px solid rgba(135, 206, 235, 0.5)';
                break;
            case 'battery':
                element.style.background = `
                    radial-gradient(circle at 20% 20%, rgba(139, 69, 19, 0.6) 8%, transparent 18%),
                    radial-gradient(circle at 85% 75%, rgba(160, 82, 45, 0.5) 12%, transparent 25%),
                    radial-gradient(circle at 50% 90%, rgba(101, 67, 33, 0.4) 10%, transparent 22%),
                    linear-gradient(135deg, rgba(178, 34, 34, 0.7) 0%, rgba(139, 0, 0, 0.8) 50%, rgba(102, 25, 25, 0.9) 100%)
                `;
                element.style.border = '2px solid rgba(139, 0, 0, 0.8)';
                break;
            case 'metal':
                element.style.background = `
                    radial-gradient(circle at 30% 25%, rgba(139, 69, 19, 0.5) 10%, transparent 20%),
                    radial-gradient(circle at 75% 70%, rgba(160, 82, 45, 0.4) 8%, transparent 18%),
                    radial-gradient(circle at 15% 80%, rgba(101, 67, 33, 0.3) 12%, transparent 24%),
                    linear-gradient(45deg, rgba(105, 105, 105, 0.8) 0%, rgba(119, 136, 153, 0.6) 40%, rgba(75, 85, 95, 0.9) 100%)
                `;
                element.style.border = '2px solid rgba(75, 85, 95, 0.8)';
                break;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –º—É—Å–æ—Ä–∞
    setupTrashItemEvents(element) {
        // –û–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π drag & drop
        // Desktop drag events
        element.addEventListener('dragstart', (e) => {
            this.isDragging = true;
            element.style.opacity = '0.7';
            e.dataTransfer.setData('text/plain', element.dataset.type);
            e.dataTransfer.setData('text/id', element.dataset.id);
            e.dataTransfer.effectAllowed = 'move';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
            this.showDecompositionInfo(element.dataset.type);
        });

        element.addEventListener('dragend', (e) => {
            this.isDragging = false;
            element.style.opacity = '1';
            this.clearContainerHighlights();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
            this.hideDecompositionInfo();
        });

        // Mobile touch events (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
        element.addEventListener('touchstart', (e) => {
            e.preventDefault();
            this.isDragging = true;
            this.currentDraggedElement = element;
            
            const touch = e.touches[0];
            this.touchStartPos = { x: touch.clientX, y: touch.clientY };
            
            const rect = element.getBoundingClientRect();
            this.originalTrashPosition = { x: rect.left, y: rect.top };
            
            element.style.position = 'fixed';
            element.style.zIndex = '1000';
            element.style.opacity = '0.8';
            element.style.transform = 'scale(1.1)';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
            this.showDecompositionInfo(element.dataset.type);
        });

        element.addEventListener('touchmove', (e) => {
            if (this.isDragging && this.currentDraggedElement === element) {
                e.preventDefault();
                const touch = e.touches[0];
                
                element.style.left = (touch.clientX - 40) + 'px';
                element.style.top = (touch.clientY - 40) + 'px';
                
                this.highlightContainerUnderTouch(touch.clientX, touch.clientY);
            }
        });

        element.addEventListener('touchend', (e) => {
            if (this.isDragging && this.currentDraggedElement === element) {
                e.preventDefault();
                const touch = e.changedTouches[0];
                const dropTarget = this.getContainerUnderTouch(touch.clientX, touch.clientY);
                
                if (dropTarget) {
                    // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Å–∞–Ω–∏—è
                    this.checkAnswer(dropTarget.dataset.type, element.dataset.id, touch.clientX, touch.clientY);
                } else {
                    this.resetTrashItemPosition(element);
                }
                
                this.isDragging = false;
                this.currentDraggedElement = null;
                this.clearContainerHighlights();
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
                this.hideDecompositionInfo();
            }
        });
    }

    // –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º—É—Å–æ—Ä–∞
    resetTrashItemPosition(element) {
        element.style.position = 'absolute';
        element.style.zIndex = '';
        element.style.opacity = '1';
        element.style.transform = '';
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        const position = this.getRandomPosition();
        element.style.left = position.x + 'px';
        element.style.top = position.y + 'px';
    }

    checkAnswer(containerType, itemId, dropX = null, dropY = null) {
        // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –ø–æ ID
        const trashItem = this.activeTrashItems.find(item => item.id === itemId);
        if (!trashItem) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∏–ø –º—É—Å–æ—Ä–∞ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const isCorrect = containerType === trashItem.data.type;
        
        if (isCorrect) {
            const basePoints = 5;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ
            this.comboCount++;
            if (this.comboCount > this.maxCombo) {
                this.maxCombo = this.comboCount;
            }
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∏ –æ—á–∫–∏
            this.comboMultiplier = this.getComboMultiplier();
            let points = basePoints * this.comboMultiplier;
            
            this.score += points;
            this.correctAnswers++;
            this.correctAnswersStreak++;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            this.checkAchievements();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
            this.recyclingStats.totalItemsSorted++;
            this.recyclingStats.itemsByType[trashItem.data.type]++;
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            let message = `+${points} –æ—á–∫–æ–≤!`;
            if (this.comboCount > 1) {
                message += ` –ö–æ–º–±–æ √ó${this.comboMultiplier}!`;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∫–æ–º–±–æ)
                const decomp = this.decompositionTime[trashItem.data.type];
                if (decomp) {
                    if (decomp.unit === "–º–µ—Å—è—Ü–µ–≤") {
                        message += `\nüå± –í—Ä–µ–º—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è: ${decomp.min}-${decomp.max} ${decomp.unit}`;
                    } else {
                        message += `\n‚è∞ –í—Ä–µ–º—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è: ${decomp.min === decomp.max ? decomp.min : decomp.min + '-' + decomp.max} ${decomp.unit}`;
                    }
                }
            }
            
            this.showFeedback(message, 'success');
            this.animateTrashCorrect(trashItem.element, dropX, dropY);
            this.playSuccessSound();
            
            // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ –ø—Ä–∏ –∫–æ–º–±–æ 4+
            if (this.comboCount >= 4 && this.comboCount % 2 === 0) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã drop –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ü–µ–Ω—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
                let centerX, centerY;
                if (dropX && dropY) {
                    centerX = dropX;
                    centerY = dropY;
                } else {
                    const rect = trashItem.element.getBoundingClientRect();
                    centerX = rect.left + rect.width / 2;
                    centerY = rect.top + rect.height / 2;
                }
                this.createComboExplosion(centerX, centerY, this.comboMultiplier);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if (this.correctAnswers % 5 === 0) {
                this.updateGameSpeed();
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            this.fillContainer(trashItem.data.type);
            
            // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
            this.removeTrashItem(itemId);
        } else {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.comboCount = 0;
            this.comboMultiplier = 1;
            this.score = Math.max(0, this.score - 5);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            this.correctAnswersStreak = 0;
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—à–∏–±–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è "–≠–∫–æ–ª–æ–≥ —Å–æ —Å—Ç–∞–∂–µ–º"
            this.lastErrorTime = Date.now();
            this.perfectStreakStart = Date.now();
            
            this.showFeedback('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! -5 –æ—á–∫–æ–≤. –ö–æ–º–±–æ —Å–±—Ä–æ—à–µ–Ω–æ!', 'error');
            this.animateTrashIncorrect(trashItem.element);
            this.playErrorSound();
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ –º–µ—Å—Ç–æ
            this.resetTrashItemPosition(trashItem.element);
        }
        
        this.updateScore();
        this.updateComboDisplay();
        this.checkLevelUp();
        this.updateLevelDisplay();
        
        console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:', containerType, '–ú—É—Å–æ—Ä:', trashItem.data.type, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ:', isCorrect, '–ö–æ–º–±–æ:', this.comboCount, '–°—á–µ—Ç:', this.score, '–£—Ä–æ–≤–µ–Ω—å:', this.currentLevel, '–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ:', this.activeTrashItems.length);
    }

    // –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    animateTrashCorrect(element, dropX = null, dropY = null) {
        element.style.animation = 'correctAnswer 0.6s ease-out';
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã —É—Å–ø–µ—Ö–∞ –≤ —Ç–æ—á–∫–µ –∫–∞—Å–∞–Ω–∏—è –∏–ª–∏ —Ü–µ–Ω—Ç—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        let particleX, particleY;
        if (dropX && dropY) {
            particleX = dropX;
            particleY = dropY;
        } else {
            const rect = element.getBoundingClientRect();
            particleX = rect.left + rect.width / 2;
            particleY = rect.top + rect.height / 2;
        }
        this.createSuccessParticles(particleX, particleY);
    }

    animateTrashIncorrect(element) {
        element.style.animation = 'incorrectAnswer 0.6s ease-out';
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –æ—à–∏–±–∫–∏ (–¥—ã–º) –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        const rect = element.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        this.createErrorParticles(centerX, centerY);
        
        setTimeout(() => {
            element.style.animation = '';
        }, 600);
    }

    showFeedback(message, type) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        const feedback = document.createElement('div');
        feedback.className = `feedback ${type}`;
        feedback.textContent = message;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if (type === 'success' && this.correctAnswers % 5 === 0 && this.correctAnswers > 0) {
            const speedLevel = Math.floor(this.correctAnswers / 5);
            feedback.textContent += ` | –£—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏: ${speedLevel}`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å
        this.gameArea.appendChild(feedback);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (feedback.parentNode) {
                feedback.parentNode.removeChild(feedback);
            }
        }, 2000);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –º—É—Å–æ—Ä–∞
    removeTrashItem(itemId) {
        const itemIndex = this.activeTrashItems.findIndex(item => item.id === itemId);
        if (itemIndex !== -1) {
            const item = this.activeTrashItems[itemIndex];
            
            setTimeout(() => {
                if (item.element.parentNode) {
                    item.element.parentNode.removeChild(item.element);
                }
                this.activeTrashItems.splice(itemIndex, 1);
                this.updateTrashCounter(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            }, 600);
        }
    }

    updateScore() {
        this.scoreElement.textContent = this.score;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
        this.scoreElement.style.animation = 'scoreUpdate 0.3s ease-out';
        setTimeout(() => {
            this.scoreElement.style.animation = '';
        }, 300);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAchievements() {
        this.achievements.forEach(achievement => {
            if (!achievement.unlocked && this.correctAnswersStreak >= achievement.requirement) {
                this.unlockAchievement(achievement);
            }
        });
    }

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    unlockAchievement(achievement) {
        achievement.unlocked = true;
        this.unlockedAchievements.push(achievement);
        this.showAchievementNotification(achievement);
        console.log(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}`);
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    showAchievementNotification(achievement) {
        const notification = document.createElement('div');
        notification.className = 'achievement-notification';
        
        notification.innerHTML = `
            <div class="achievement-content">
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-text">
                    <h3>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</h3>
                    <h4>${achievement.name}</h4>
                    <p>${achievement.description}</p>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 500);
        }, 5000);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
        notification.addEventListener('click', () => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 500);
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–±–æ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è
    updateComboDisplay() {
        document.getElementById('combo').textContent = this.comboCount;
        document.getElementById('multiplier').textContent = this.comboMultiplier;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        const streakElement = document.getElementById('streak');
        if (streakElement) {
            streakElement.textContent = this.correctAnswersStreak;
        }
        
        const comboDisplay = document.querySelector('.stat-item:nth-child(2)');
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∫–æ–º–±–æ
        if (this.comboCount >= 10) {
            comboDisplay.style.color = '#9b59b6';
            comboDisplay.style.textShadow = '0 0 15px rgba(155, 89, 182, 0.8)';
        } else if (this.comboCount >= 7) {
            comboDisplay.style.color = '#e74c3c';
            comboDisplay.style.textShadow = '0 0 10px rgba(231, 76, 60, 0.8)';
        } else if (this.comboCount >= 4) {
            comboDisplay.style.color = '#f39c12';
            comboDisplay.style.textShadow = '0 0 8px rgba(243, 156, 18, 0.6)';
        } else if (this.comboCount >= 2) {
            comboDisplay.style.color = '#2ecc71';
            comboDisplay.style.textShadow = '0 0 5px rgba(46, 204, 113, 0.5)';
        } else {
            comboDisplay.style.color = '#7f8c8d';
            comboDisplay.style.textShadow = 'none';
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–±–æ
        if (this.comboCount > 0) {
            comboDisplay.style.animation = 'comboUpdate 0.4s ease-out';
            setTimeout(() => {
                comboDisplay.style.animation = '';
            }, 400);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
    togglePause() {
        if (this.spawnTimer) {
            this.pauseGame();
        } else {
            this.resumeGame();
        }
    }

    // –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É
    pauseGame() {
        if (this.spawnTimer) {
            clearTimeout(this.spawnTimer);
            this.spawnTimer = null;
            console.log('–ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ');
        }
    }

    // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
    resumeGame() {
        if (!this.spawnTimer) {
            this.scheduleNextSpawn();
            console.log('–ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        }
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ø–∞–≤–Ω)
    forceResumeGame() {
        if (this.spawnTimer) {
            clearTimeout(this.spawnTimer);
            this.spawnTimer = null;
        }
        this.scheduleNextSpawn();
        console.log('–ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
    getGameStats() {
        const playTime = Math.floor((Date.now() - this.gameStartTime) / 1000);
        const accuracy = this.correctAnswers > 0 ? Math.round((this.correctAnswers / (this.correctAnswers + Math.max(0, (this.score < 0 ? Math.abs(this.score) / 5 : 0)))) * 100) : 0;
        
        return {
            score: this.score,
            correctAnswers: this.correctAnswers,
            playTime: playTime,
            accuracy: accuracy,
            currentSpeed: this.currentSpawnInterval,
            maxCombo: this.maxCombo,
            currentLevel: this.currentLevel,
            activeItems: this.activeTrashItems.length,
            unlockedAchievements: this.unlockedAchievements.slice() // –∫–æ–ø–∏—è –º–∞—Å—Å–∏–≤–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        };
    }

    // –ú–µ—Ç–æ–¥—ã –±–æ–Ω—É—Å–æ–≤ —É–¥–∞–ª–µ–Ω—ã

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    checkLevelUp() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        if (this.currentLevel >= this.maxLevel) {
            const victoryThreshold = 750; // 750 –æ—á–∫–æ–≤ = –ø–æ–±–µ–¥–∞
            if (this.score >= victoryThreshold) {
                console.log('–ü–û–ë–ï–î–ê! –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –ø–æ–±–µ–¥—ã:', victoryThreshold);
                this.endGame();
            }
            return;
        }
        
        const nextLevelThreshold = this.levelThresholds[this.currentLevel];
        if (this.score >= nextLevelThreshold) {
            this.currentLevel++;
            this.unlockNewTrashTypes();
            this.updateColorScheme(); // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
            this.showLevelUpAnimation();
            this.updateLevelDisplay();
            console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ${this.currentLevel}!`);
        }
    }

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –º—É—Å–æ—Ä–∞
    unlockNewTrashTypes() {
        const levelTrashTypes = {
            2: ['organic'],   // –£—Ä–æ–≤–µ–Ω—å 2: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∫—É (3-–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
            3: ['glass'],     // –£—Ä–æ–≤–µ–Ω—å 3: –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–∫–ª–æ (4-–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)  
            4: ['battery']    // –£—Ä–æ–≤–µ–Ω—å 4: –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã (5-–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
        };
        
        const newTypes = levelTrashTypes[this.currentLevel];
        if (newTypes) {
            this.unlockedTypes.push(...newTypes);
            this.createNewContainers(newTypes);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    createNewContainers(newTypes) {
        const containersElement = document.querySelector('.containers');
        
        newTypes.forEach(type => {
            const container = document.createElement('div');
            container.className = `container-btn ${this.getContainerClass(type)}`;
            container.dataset.type = type;
            
            const icon = document.createElement('div');
            icon.className = 'container-icon';
            icon.textContent = this.getContainerIcon(type);
            
            const label = document.createElement('span');
            label.textContent = this.getContainerLabel(type);
            
            const handle = document.createElement('div');
            handle.className = 'lid-handle';
            
            container.appendChild(handle);
            container.appendChild(icon);
            container.appendChild(label);
            
            containersElement.appendChild(container);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupContainerEvents(container);
            
            // –≠—Ñ—Ñ–µ–∫—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            this.materializeContainer(container, type);
        });
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    getContainerClass(type) {
        const classes = {
            organic: 'green',
            glass: 'cyan',
            battery: 'red',
            metal: 'gray'
        };
        return classes[type] || 'gray';
    }

    getContainerIcon(type) {
        const icons = {
            organic: 'üçï',
            glass: 'ü•É',
            battery: '‚ö†Ô∏è'
        };
        return icons[type] || '‚ùì';
    }

    getContainerLabel(type) {
        const labels = {
            organic: '–û—Ä–≥–∞–Ω–∏–∫–∞',
            glass: '–°—Ç–µ–∫–ª–æ',
            battery: '–û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã'
        };
        return labels[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    setupContainerEvents(container) {
        // Desktop drag events
        container.addEventListener('dragover', (e) => {
            e.preventDefault();
            container.classList.add('drag-over');
        });

        container.addEventListener('dragleave', () => {
            container.classList.remove('drag-over');
        });

        container.addEventListener('drop', (e) => {
            e.preventDefault();
            container.classList.remove('drag-over');
            
            const droppedType = e.dataTransfer.getData('text/plain');
            const itemId = e.dataTransfer.getData('text/id');
            
            // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∞ –Ω–µ —Ç–∏–ø –º—É—Å–æ—Ä–∞
            this.checkAnswer(container.dataset.type, itemId);
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    showLevelUpAnimation() {
        // –°—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è
        this.pauseGame();
        
        const levelUpMessage = document.createElement('div');
        levelUpMessage.className = 'level-up-message';
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
        const randomFact = this.ecoFacts[Math.floor(Math.random() * this.ecoFacts.length)];
        
        levelUpMessage.innerHTML = `
            <div class="level-up-content">
                <h2>üéâ –£–†–û–í–ï–ù–¨ ${this.currentLevel}! üéâ</h2>
                <p>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –º—É—Å–æ—Ä–∞!</p>
                <p>–¢—Ä–µ–±—É–µ—Ç—Å—è: ${this.currentLevel >= 4 ? '750 –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã' : `${this.levelThresholds[this.currentLevel]} –æ—á–∫–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è`}</p>
                
                <div class="eco-fact">
                    <h3>üå± ${randomFact.title}</h3>
                    <p>${randomFact.text}</p>
                </div>
            </div>
        `;
        
        document.body.appendChild(levelUpMessage);
        
        setTimeout(() => {
            if (levelUpMessage.parentNode) {
                levelUpMessage.parentNode.removeChild(levelUpMessage);
            }
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è
            this.forceResumeGame();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–ø–∞–≤–Ω –º—É—Å–æ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            if (this.activeTrashItems.length < this.maxTrashItems) {
                setTimeout(() => {
                    this.spawnTrash();
                }, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            }
        }, 5000); // –í—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –∫–∞–∫ –≤ CSS –∞–Ω–∏–º–∞—Ü–∏–∏
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    updateLevelDisplay() {
        let levelDisplay = document.getElementById('level-display');
        if (!levelDisplay) {
            levelDisplay = document.createElement('div');
            levelDisplay.id = 'level-display';
            levelDisplay.className = 'level-display';
            document.querySelector('.score-board').appendChild(levelDisplay);
        }
        
        const currentThreshold = this.levelThresholds[this.currentLevel - 1] || 0;
        const nextThreshold = this.levelThresholds[this.currentLevel];
        
        let progress = 0;
        if (nextThreshold) {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
            const currentLevelProgress = this.score - currentThreshold;
            const levelRange = nextThreshold - currentThreshold;
            progress = Math.max(0, Math.min(100, (currentLevelProgress / levelRange) * 100));
        } else {
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ –ø–æ–±–µ–¥—ã –æ—Ç –Ω–∞—á–∞–ª–∞ 4-–≥–æ —É—Ä–æ–≤–Ω—è
            const currentThresholdFor4 = this.levelThresholds[this.currentLevel - 1]; // 450 (–Ω–∞—á–∞–ª–æ 4-–≥–æ —É—Ä–æ–≤–Ω—è)
            const victoryThreshold = 750;
            const progressToVictory = this.score - currentThresholdFor4; // –æ—á–∫–∏ —Å–≤–µ—Ä—Ö 450
            const victoryRange = victoryThreshold - currentThresholdFor4; // 750 - 450 = 300
            progress = Math.min(100, (progressToVictory / victoryRange) * 100);
        }
        
        levelDisplay.innerHTML = `
            <div class="level-info">
                <span class="level-number">–£—Ä–æ–≤–µ–Ω—å ${this.currentLevel}</span>
                <div class="level-progress">
                    <div class="progress-bar" style="width: ${progress}%"></div>
                </div>
            </div>
        `;
        
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è:', {
            score: this.score,
            currentLevel: this.currentLevel,
            currentThreshold,
            nextThreshold,
            progress: progress.toFixed(1) + '%'
        });
     }



     // –ü–æ–∫–∞–∑ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
     showInitialTutorial() {
         // –°—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
         this.pauseGame();
         
         const tutorial = document.createElement('div');
         tutorial.className = 'tutorial-popup';
         tutorial.innerHTML = `
             <div class="tutorial-content">
                 <div class="tutorial-icon">üí°</div>
                 <p>–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã</p>
                 <p>–°–æ–±–∏—Ä–∞–π—Ç–µ –∫–æ–º–±–æ –∏ –±–æ–Ω—É—Å—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!</p>
             </div>
         `;
         
         document.body.appendChild(tutorial);
         
         // –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
         setTimeout(() => {
             tutorial.style.opacity = '0';
             setTimeout(() => {
                 if (tutorial.parentNode) {
                     tutorial.parentNode.removeChild(tutorial);
                 }
                 // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
                 this.resumeGame();
             }, 500);
         }, 3000);
     }

     // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     fillContainer(type) {
         if (!this.containerFillLevels.hasOwnProperty(type)) return;
         
         // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
         this.containerFillLevels[type] = Math.min(
             this.maxFillLevel, 
             this.containerFillLevels[type] + this.fillIncrement
         );
         
         // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
         this.updateContainerFillDisplay(type);
         
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
         if (this.containerFillLevels[type] >= this.maxFillLevel) {
             this.emptyContainer(type);
         }
     }

     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     updateContainerFillDisplay(type) {
         const container = document.querySelector(`[data-type="${type}"]`);
         if (!container) return;
         
         const fillLevel = this.containerFillLevels[type];
         const fillPercentage = (fillLevel / this.maxFillLevel) * 100;
         
         // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
         let fillElement = container.querySelector('.container-fill');
         if (!fillElement) {
             fillElement = document.createElement('div');
             fillElement.className = 'container-fill';
             container.appendChild(fillElement);
         }
         
         // –ê–Ω–∏–º–∏—Ä—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
         fillElement.style.height = `${fillPercentage}%`;
         
         // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º—É—Å–æ—Ä–∞
         this.animateContainerFill(container, type);
         
         // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
         this.updateContainerFillColor(fillElement, fillPercentage, type);
     }

     // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     animateContainerFill(container, type) {
         // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º—É—Å–æ—Ä–∞
         const trashParticle = document.createElement('div');
         trashParticle.className = 'trash-particle';
         trashParticle.innerHTML = this.getTrashParticleIcon(type);
         
         container.appendChild(trashParticle);
         
         // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
         setTimeout(() => {
             if (trashParticle.parentNode) {
                 trashParticle.parentNode.removeChild(trashParticle);
             }
         }, 800);
         
         // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Å—Ç—Ä—è—Ö–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
         container.style.animation = 'containerShake 0.3s ease-out';
         setTimeout(() => {
             container.style.animation = '';
         }, 300);
     }

     // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —á–∞—Å—Ç–∏—Ü—ã –º—É—Å–æ—Ä–∞
     getTrashParticleIcon(type) {
         const icons = {
             plastic: 'üß¥',
             paper: 'üìÑ',
             organic: 'üçï',
             glass: 'üçæ',
             battery: 'üîã'
         };
         return icons[type] || 'üóëÔ∏è';
     }

     // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
     updateContainerFillColor(fillElement, percentage, type) {
         let color1, color2;
         
         // –ë–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
         const baseColors = {
             plastic: ['rgba(52, 152, 219, 0.3)', 'rgba(52, 152, 219, 0.8)'],
             paper: ['rgba(241, 196, 15, 0.3)', 'rgba(241, 196, 15, 0.8)'],
             organic: ['rgba(39, 174, 96, 0.3)', 'rgba(39, 174, 96, 0.8)'],
             glass: ['rgba(52, 152, 219, 0.4)', 'rgba(52, 152, 219, 0.9)'],
             battery: ['rgba(231, 76, 60, 0.3)', 'rgba(231, 76, 60, 0.8)']
         };
         
         [color1, color2] = baseColors[type] || baseColors.plastic;
         
         // –ì—Ä–∞–¥–∏–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
         const intensity = Math.min(1, percentage / 100);
         fillElement.style.background = `linear-gradient(180deg, ${color1}, ${color2})`;
         fillElement.style.opacity = 0.3 + (intensity * 0.4);
     }

     // –û–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     emptyContainer(type) {
         const container = document.querySelector(`[data-type="${type}"]`);
         if (!container) return;
         
         // –ê–Ω–∏–º–∞—Ü–∏—è –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è
         this.animateContainerEmpty(container, type);
         
         // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
         this.containerFillLevels[type] = 0;
         
         // –î–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏
         const bonusPoints = 10;
         this.score += bonusPoints;
         this.updateScore();
         
         this.showFeedback(`üéâ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω! +${bonusPoints} –æ—á–∫–æ–≤!`, 'success');
         
         setTimeout(() => {
             this.updateContainerFillDisplay(type);
         }, 1000);
     }

     // –ê–Ω–∏–º–∞—Ü–∏—è –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     animateContainerEmpty(container, type) {
         // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è
         const emptyEffect = document.createElement('div');
         emptyEffect.className = 'empty-effect';
         emptyEffect.innerHTML = '‚ú® –ó–ê–ü–û–õ–ù–ï–ù! ‚ú®';
         
         container.appendChild(emptyEffect);
         
         // –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—ã—à–∫–∏
         container.classList.add('emptying');
         
         setTimeout(() => {
             container.classList.remove('emptying');
             if (emptyEffect.parentNode) {
                 emptyEffect.parentNode.removeChild(emptyEffect);
             }
         }, 1000);
         
         // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è
         this.playEmptyContainerSound();
     }

     // –ó–≤—É–∫ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     playEmptyContainerSound() {
         if (!this.audioContext) return;
         
         // –ó–≤—É–∫ –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è - –≤–æ—Å—Ö–æ–¥—è—â–∞—è –º–µ–ª–æ–¥–∏—è
         const notes = [261.63, 329.63, 392.00, 523.25]; // C4, E4, G4, C5
         
         notes.forEach((freq, index) => {
             setTimeout(() => {
                 const oscillator = this.audioContext.createOscillator();
                 const gainNode = this.audioContext.createGain();
                 
                 oscillator.connect(gainNode);
                 gainNode.connect(this.audioContext.destination);
                 
                 oscillator.frequency.setValueAtTime(freq, this.audioContext.currentTime);
                 oscillator.type = 'sine';
                 
                 gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
                 gainNode.gain.linearRampToValueAtTime(0.1, this.audioContext.currentTime + 0.05);
                 gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.3);
                 
                 oscillator.start(this.audioContext.currentTime);
                 oscillator.stop(this.audioContext.currentTime + 0.3);
             }, index * 100);
         });
     }

     // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
     initializeContainerFills() {
         Object.keys(this.containerFillLevels).forEach(type => {
             this.updateContainerFillDisplay(type);
         });
     }

     // === –°–ò–°–¢–ï–ú–ê –õ–ò–î–ï–†–ë–û–†–î–ê ===
     
     // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –∏–∑ localStorage
     loadLeaderboard() {
         const savedLeaderboard = localStorage.getItem('sortingGameLeaderboard');
         if (savedLeaderboard) {
             const leaderboard = JSON.parse(savedLeaderboard);
             // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –ø–æ–ª—è level –∏ achievements
             leaderboard.forEach(entry => {
                 if (entry.level === undefined) {
                     entry.level = 1; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å 1 –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                 }
                 if (entry.achievements === undefined) {
                     entry.achievements = []; // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                 }
             });
             return leaderboard;
         }
         return [];
     }

     // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ –≤ localStorage
     saveLeaderboard() {
         localStorage.setItem('sortingGameLeaderboard', JSON.stringify(this.leaderboard));
     }

     // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã
     checkForNewRecord() {
         const gameStats = this.getGameStats();
         const minScoreForLeaderboard = 50; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
         
         if (gameStats.score >= minScoreForLeaderboard) {
             this.showNameInputDialog(gameStats);
         } else {
             this.showLeaderboard();
         }
     }

     // –î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
     showNameInputDialog(gameStats) {
         // –°—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –≤–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞
         this.pauseGame();
         
         const overlay = document.createElement('div');
         overlay.className = 'leaderboard-overlay';
         
         // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç
         const ecoImpact = this.calculateEcoImpact();
         
         overlay.innerHTML = `
             <div class="name-input-dialog">
                 <div class="dialog-content">
                     <h2>üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</h2>
                     <div class="score-summary">
                         <p><strong>–û—á–∫–∏:</strong> ${gameStats.score}</p>
                         <p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–º–±–æ:</strong> ${gameStats.maxCombo}</p>
                         <p><strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</strong> ${gameStats.correctAnswers}</p>
                         <p><strong>–£—Ä–æ–≤–µ–Ω—å:</strong> ${gameStats.currentLevel}</p>
                         <p><strong>–í—Ä–µ–º—è –∏–≥—Ä—ã:</strong> ${Math.floor(gameStats.playTime / 60)}:${String(gameStats.playTime % 60).padStart(2, '0')}</p>
                     </div>
                     
                     <div class="recycling-stats">
                         <h3>üåç –í–∞—à –≤–∫–ª–∞–¥ –≤ —ç–∫–æ–ª–æ–≥–∏—é:</h3>
                         <p><strong>–í—Å–µ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:</strong> ${this.recyclingStats.totalItemsSorted} –ø—Ä–µ–¥–º–µ—Ç–æ–≤</p>
                         ${this.generateRecyclingBreakdown()}
                         <div class="eco-impact">
                             <h4>üíö –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç:</h4>
                             ${ecoImpact}
                         </div>
                     </div>
                     <div class="name-input-section">
                         <label for="player-name">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</label>
                         <input type="text" id="player-name" maxlength="20" placeholder="–≠–∫–æ–ª–æ–≥" />
                         <div class="dialog-buttons">
                             <button id="save-score" class="btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç</button>
                             <button id="skip-save" class="btn-secondary">–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</button>
                         </div>
                     </div>
                 </div>
             </div>
         `;
         
         document.body.appendChild(overlay);
         
         const nameInput = document.getElementById('player-name');
         const saveBtn = document.getElementById('save-score');
         const skipBtn = document.getElementById('skip-save');
         
         // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
         nameInput.focus();
         
         // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
         const handleSave = () => {
             const playerName = nameInput.value.trim() || '–ê–Ω–æ–Ω–∏–º';
             this.addToLeaderboard(playerName, gameStats);
             this.showLeaderboard();
             document.body.removeChild(overlay);
         };
         
         const handleSkip = () => {
             this.showLeaderboard();
             document.body.removeChild(overlay);
         };
         
         saveBtn.addEventListener('click', handleSave);
         skipBtn.addEventListener('click', handleSkip);
         
         // Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
         nameInput.addEventListener('keypress', (e) => {
             if (e.key === 'Enter') {
                 handleSave();
             }
         });
     }

     // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥
     addToLeaderboard(playerName, gameStats) {
         const newEntry = {
             name: playerName,
             score: gameStats.score,
             maxCombo: gameStats.maxCombo,
             correctAnswers: gameStats.correctAnswers,
             level: gameStats.currentLevel,
             playTime: gameStats.playTime,
             date: new Date().toLocaleDateString('ru-RU'),
             timestamp: Date.now(),
             achievements: gameStats.unlockedAchievements || []
         };
         
         this.leaderboard.push(newEntry);
         
         // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
         this.leaderboard.sort((a, b) => b.score - a.score);
         
         // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10
         this.leaderboard = this.leaderboard.slice(0, 10);
         
         this.saveLeaderboard();
         console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥:', newEntry);
     }

     // –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
     showLeaderboard() {
         // –°—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
         this.pauseGame();
         
         const overlay = document.createElement('div');
         overlay.className = 'leaderboard-overlay';
         
         let leaderboardHTML = `
             <div class="leaderboard-dialog">
                 <div class="leaderboard-header">
                     <h2>üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥</h2>
                     <button class="close-leaderboard">√ó</button>
                 </div>
                 <div class="leaderboard-content">
         `;
         
         if (this.leaderboard.length === 0) {
             leaderboardHTML += `
                 <div class="empty-leaderboard">
                     <p>üéÆ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø—É—Å—Ç</p>
                     <p>–ù–∞–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 50 –æ—á–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥!</p>
                 </div>
             `;
         } else {
             leaderboardHTML += `
                 <div class="leaderboard-table">
                     <div class="table-header">
                         <span>–ú–µ—Å—Ç–æ</span>
                         <span>–ò–º—è</span>
                         <span>–û—á–∫–∏</span>
                         <span>–ö–æ–º–±–æ</span>
                         <span>–£—Ä–æ–≤–µ–Ω—å</span>
                         <span>–î–∞—Ç–∞</span>
                     </div>
             `;
             
             this.leaderboard.forEach((entry, index) => {
                 const position = index + 1;
                 const medal = position === 1 ? 'ü•á' : position === 2 ? 'ü•à' : position === 3 ? 'ü•â' : position;
                 
                 // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
                 let achievementsHTML = '';
                 if (entry.achievements && entry.achievements.length > 0) {
                     // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ ID
                     const achievementIcons = entry.achievements.map(achievementId => {
                         const achievement = this.achievements.find(a => a.id === achievementId);
                         return achievement ? achievement.icon : '';
                     }).filter(icon => icon !== '').join(' ');
                     
                     if (achievementIcons) {
                         achievementsHTML = ` ${achievementIcons}`;
                     }
                 }
                 
                 leaderboardHTML += `
                     <div class="table-row ${position <= 3 ? 'top-three' : ''}">
                         <span class="position">${medal}</span>
                         <span class="name">${entry.name}${achievementsHTML}</span>
                         <span class="score">${entry.score}</span>
                         <span class="combo">${entry.maxCombo}</span>
                         <span class="level">${entry.level}</span>
                         <span class="date">${entry.date}</span>
                     </div>
                 `;
             });
             
             leaderboardHTML += '</div>';
         }
         
         leaderboardHTML += `
                 </div>
                 <div class="leaderboard-actions">
                     <button id="new-game" class="btn-primary">–ù–æ–≤–∞—è –∏–≥—Ä–∞</button>
                     <button id="clear-leaderboard" class="btn-danger">–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥</button>
                 </div>
             </div>
         `;
         
         overlay.innerHTML = leaderboardHTML;
         document.body.appendChild(overlay);
         
         // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
         const closeBtn = overlay.querySelector('.close-leaderboard');
         const newGameBtn = overlay.querySelector('#new-game');
         const clearBtn = overlay.querySelector('#clear-leaderboard');
         
         const closeLeaderboard = () => {
             document.body.removeChild(overlay);
             // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
             this.resumeGame();
         };
         
         closeBtn.addEventListener('click', closeLeaderboard);
         
         newGameBtn.addEventListener('click', () => {
             document.body.removeChild(overlay);
             this.restartGame();
         });
         
         clearBtn.addEventListener('click', () => {
             if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥?')) {
                 this.clearLeaderboard();
                 document.body.removeChild(overlay);
                 this.showLeaderboard(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥
             }
         });
         
         // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
         overlay.addEventListener('click', (e) => {
             if (e.target === overlay) {
                 closeLeaderboard();
             }
         });
     }

     // –û—á–∏—Å—Ç–∫–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
     clearLeaderboard() {
         this.leaderboard = [];
         this.saveLeaderboard();
         console.log('–õ–∏–¥–µ—Ä–±–æ—Ä–¥ –æ—á–∏—â–µ–Ω');
     }

     // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     restartGame() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
        if (this.spawnTimer) {
            clearTimeout(this.spawnTimer);
            this.spawnTimer = null;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.stopAtmosphericEffects();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
        this.score = 0;
        this.correctAnswers = 0;
        this.comboCount = 0;
        this.maxCombo = 0;
        this.comboMultiplier = 1;
        this.currentLevel = 1;
        this.unlockedTypes = ['plastic', 'paper', 'organic'];
        this.currentSpawnInterval = this.baseSpawnInterval;
        this.gameStartTime = Date.now();
        this.perfectStreakStart = Date.now();
        this.lastErrorTime = 0;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.correctAnswersStreak = 0;
        this.unlockedAchievements = [];
        this.achievements.forEach(achievement => {
            achievement.unlocked = false;
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
        this.recyclingStats.totalItemsSorted = 0;
        Object.keys(this.recyclingStats.itemsByType).forEach(type => {
            this.recyclingStats.itemsByType[type] = 0;
        });
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –º—É—Å–æ—Ä–∞
        this.activeTrashItems.forEach(item => {
            if (item.element && item.element.parentNode) {
                item.element.parentNode.removeChild(item.element);
            }
        });
        this.activeTrashItems = [];
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        Object.keys(this.containerFillLevels).forEach(type => {
            this.containerFillLevels[type] = 0;
        });
        
        // –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        const containers = document.querySelectorAll('.container-btn');
        containers.forEach((container, index) => {
            if (index >= 3) { // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                container.remove();
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        this.containers = Array.from(document.querySelectorAll('.container-btn'));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateScore();
        this.updateComboDisplay();
        this.updateLevelDisplay();
        this.updateTrashCounter();
        this.initializeContainerFills();
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        this.startSpawning();
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.initAtmosphericEffects();
        
        console.log('–ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞');
     }

     // –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ (–∫–Ω–æ–ø–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
     showLeaderboardButton() {
         this.showLeaderboard();
     }

     // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Ç–∏–ø–∞–º
     generateRecyclingBreakdown() {
         let breakdown = '';
         const typeNames = {
             plastic: '‚ôªÔ∏è –ü–ª–∞—Å—Ç–∏–∫',
             paper: 'üìÑ –ë—É–º–∞–≥–∞', 
             organic: 'üå± –û—Ä–≥–∞–Ω–∏–∫–∞',
             glass: 'üçæ –°—Ç–µ–∫–ª–æ',
             battery: '‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã'
         };
         
         for (const [type, count] of Object.entries(this.recyclingStats.itemsByType)) {
             if (count > 0) {
                 breakdown += `<p>${typeNames[type]}: ${count} —à—Ç.</p>`;
             }
         }
         
         return breakdown || '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ</p>';
     }
     
     // –†–∞—Å—á–µ—Ç —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
     calculateEcoImpact() {
         const impacts = {
             plastic: { 
                 text: '–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –Ω–µ—Ñ—Ç–∏', 
                 perItem: 2, // –∫–≥ –Ω–µ—Ñ—Ç–∏ –Ω–∞ 1 –∫–≥ –ø–ª–∞—Å—Ç–∏–∫–∞
                 unit: '–∫–≥'
             },
             paper: { 
                 text: '–°–ø–∞—Å–µ–Ω–æ –¥–µ—Ä–µ–≤—å–µ–≤', 
                 perItem: 0.017, // –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ –∫–≥ –±—É–º–∞–≥–∏
                 unit: '—à—Ç'
             },
             organic: { 
                 text: '–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–ø–æ—Å—Ç–∞', 
                 perItem: 0.3, // –∫–≥ –∫–æ–º–ø–æ—Å—Ç–∞ –∏–∑ –∫–≥ –æ—Ä–≥–∞–Ω–∏–∫–∏
                 unit: '–∫–≥'
             },
             glass: { 
                 text: '–°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏', 
                 perItem: 0.5, // –∫–í—Ç¬∑—á –Ω–∞ –∫–≥ —Å—Ç–µ–∫–ª–∞
                 unit: '–∫–í—Ç¬∑—á'
             },
             battery: { 
                 text: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è', 
                 perItem: 20, // –∫–≤.–º –ø–æ—á–≤—ã/–≤–æ–¥—ã
                 unit: '–∫–≤.–º –ø–æ—á–≤—ã/–≤–æ–¥—ã'
             }
         };
         
         let result = '';
         for (const [type, count] of Object.entries(this.recyclingStats.itemsByType)) {
             if (count > 0 && impacts[type]) {
                 const impact = impacts[type];
                 const value = (count * impact.perItem).toFixed(impact.unit === '—à—Ç' ? 1 : 2);
                 result += `<p>‚Ä¢ ${impact.text}: ${value} ${impact.unit}</p>`;
             }
         }
         
         return result || '<p>–ù–∞—á–Ω–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º—É—Å–æ—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç!</p>';
     }

     // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
     showDecompositionInfo(type) {
         // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
         this.hideDecompositionInfo();
         
         const spawnArea = document.getElementById('trash-spawn-area');
         const decomp = this.decompositionTime[type];
         
         if (!decomp || !spawnArea) return;
         
         const infoDiv = document.createElement('div');
         infoDiv.id = 'decomposition-info';
         infoDiv.className = 'decomposition-info';
         
         let timeText;
         if (decomp.unit === "–º–µ—Å—è—Ü–µ–≤") {
             timeText = `${decomp.min}-${decomp.max} ${decomp.unit}`;
         } else {
             timeText = decomp.min === decomp.max ? `${decomp.min} ${decomp.unit}` : `${decomp.min}-${decomp.max} ${decomp.unit}`;
         }
         
         // –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
         let icon, colorClass;
         if (decomp.unit === "–º–µ—Å—è—Ü–µ–≤") {
             icon = 'üå±'; // –ë—ã—Å—Ç—Ä–æ —Ä–∞–∑–ª–∞–≥–∞–µ—Ç—Å—è
             colorClass = 'fast-decomp';
         } else if (decomp.max <= 100) {
             icon = '‚è∞'; // –ú–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑–ª–∞–≥–∞–µ—Ç—Å—è
             colorClass = 'slow-decomp';
         } else {
             icon = '‚ö†Ô∏è'; // –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ
             colorClass = 'very-slow-decomp';
         }
         
         infoDiv.innerHTML = `
             <div class="decomp-content">
                 ${icon} <strong>–í—Ä–µ–º—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è:</strong><br>
                 ${timeText}
             </div>
         `;
         infoDiv.className += ` ${colorClass}`;
         
         spawnArea.appendChild(infoDiv);
     }
     
     // –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
     hideDecompositionInfo() {
         const infoDiv = document.getElementById('decomposition-info');
         if (infoDiv && infoDiv.parentNode) {
             infoDiv.parentNode.removeChild(infoDiv);
         }
     }

     // –ü–æ–∫–∞–∑ —Ñ–∞–∫—Ç–∞ –¥–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
     showDailyFact() {
         // –°—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ —Ñ–∞–∫—Ç–∞
         this.pauseGame();
         
         // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–∫—Ç–∞
         const today = new Date();
         const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);
         const currentHour = today.getHours();
         const currentMinute = today.getMinutes();
         
         // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–µ–Ω—å, —á–∞—Å –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
         const seed = dayOfYear + currentHour + Math.floor(currentMinute / 15); // –ú–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
         const factIndex = seed % this.dailyFacts.length;
         const dailyFact = this.dailyFacts[factIndex];
         
         // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π –¥–ª—è —Ñ–∞–∫—Ç–∞ –¥–Ω—è
         const overlay = document.createElement('div');
         overlay.className = 'daily-fact-overlay';
         
         overlay.innerHTML = `
             <div class="daily-fact-dialog">
                 <div class="daily-fact-header">
                     <span class="daily-fact-icon">${dailyFact.icon}</span>
                     <h2>–§–∞–∫—Ç –¥–Ω—è</h2>
                     <span class="daily-fact-date">${today.toLocaleDateString('ru-RU')}</span>
                 </div>
                 <div class="daily-fact-content">
                     <h3>${dailyFact.title}</h3>
                     <p>${dailyFact.text}</p>
                 </div>
                 <div class="daily-fact-footer">
                     <button id="start-game-btn" class="btn-primary">üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
                 </div>
             </div>
         `;
         
         document.body.appendChild(overlay);
         
         // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
         const startGameBtn = document.getElementById('start-game-btn');
         
         const startGame = () => {
             document.body.removeChild(overlay);
             this.showInitialTutorial();
             this.startSpawning();
             this.startOverflowMonitoring();
         };
         
         startGameBtn.addEventListener('click', startGame);
         
         // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
         setTimeout(() => {
             if (overlay.parentNode) {
                 startGame();
             }
         }, 15000);
     }

     // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –≤—Ä—É—á–Ω—É—é
     endGame() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∞–≤–Ω –º—É—Å–æ—Ä–∞
        if (this.spawnTimer) {
            clearTimeout(this.spawnTimer);
            this.spawnTimer = null;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
        const gameStats = this.getGameStats();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥
        this.checkForNewRecord(gameStats);
    }

    // –ú–µ—Ç–æ–¥—ã –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    initAtmosphericEffects() {
        this.atmosphericTimers = {
            leaves: null,
            dust: null
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        setTimeout(() => this.startFallingLeaves(), 1000);
        setTimeout(() => this.startDustParticles(), 2000);
    }

    startFallingLeaves() {
        const container = document.getElementById('falling-leaves');
        const leafEmojis = ['üçÉ', 'üåø', 'üçÇ', 'üå±'];
        
        const createLeaf = () => {
            const leaf = document.createElement('div');
            leaf.className = 'falling-leaf';
            
            // –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –ª–∏—Å—Ç–∞
            leaf.textContent = leafEmojis[Math.floor(Math.random() * leafEmojis.length)];
            
            // –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∏–ª–∏
            const speeds = ['slow', 'medium', 'fast'];
            leaf.classList.add(speeds[Math.floor(Math.random() * speeds.length)]);
            
            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            leaf.style.left = Math.random() * 100 + '%';
            
            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            leaf.style.animationDelay = Math.random() * 2 + 's';
            
            container.appendChild(leaf);
            
            // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (leaf.parentNode) {
                    leaf.parentNode.removeChild(leaf);
                }
            }, 10000);
        };
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—å—è –∫–∞–∂–¥—ã–µ 3-6 —Å–µ–∫—É–Ω–¥
        const scheduleNextLeaf = () => {
            this.atmosphericTimers.leaves = setTimeout(() => {
                createLeaf();
                scheduleNextLeaf();
            }, Math.random() * 3000 + 3000);
        };
        
        scheduleNextLeaf();
    }

    startDustParticles() {
        const container = document.getElementById('dust-particles');
        
        const createDustParticle = () => {
            const particle = document.createElement('div');
            particle.className = 'dust-particle';
            
            // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            const speeds = ['slow', 'medium', 'fast'];
            particle.classList.add(speeds[Math.floor(Math.random() * speeds.length)]);
            
            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            particle.style.left = Math.random() * 100 + '%';
            particle.style.animationDelay = Math.random() * 5 + 's';
            
            // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            const size = Math.random() * 2 + 1;
            particle.style.width = size + 'px';
            particle.style.height = size + 'px';
            
            container.appendChild(particle);
            
            // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 15000);
        };
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã –ø—ã–ª–∏ –∫–∞–∂–¥—ã–µ 1-3 —Å–µ–∫—É–Ω–¥—ã
        const scheduleNextDust = () => {
            this.atmosphericTimers.dust = setTimeout(() => {
                createDustParticle();
                scheduleNextDust();
            }, Math.random() * 2000 + 1000);
        };
        
        scheduleNextDust();
    }

    startRecyclingRain() {
        const container = document.getElementById('recycling-rain');
        const recyclingEmojis = ['‚ôªÔ∏è', 'üîÑ', 'üåç', 'üíö', 'üåø', '‚ö°', 'üíß', 'üåü'];
        
        const createRecyclingDrop = () => {
            const drop = document.createElement('div');
            drop.className = 'recycling-drop';
            
            // –°–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
            drop.textContent = recyclingEmojis[Math.floor(Math.random() * recyclingEmojis.length)];
            
            // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            const speeds = ['slow', 'medium', 'fast'];
            drop.classList.add(speeds[Math.floor(Math.random() * speeds.length)]);
            
            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            drop.style.left = Math.random() * 100 + '%';
            drop.style.animationDelay = Math.random() * 3 + 's';
            
            container.appendChild(drop);
            
            // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (drop.parentNode) {
                    drop.parentNode.removeChild(drop);
                }
            }, 8000);
        };
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞–ø–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥—ã–µ 4-8 —Å–µ–∫—É–Ω–¥
        const scheduleNextDrop = () => {
            this.atmosphericTimers.rain = setTimeout(() => {
                createRecyclingDrop();
                scheduleNextDrop();
            }, Math.random() * 4000 + 4000);
        };
        
        scheduleNextDrop();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    stopAtmosphericEffects() {
        if (this.atmosphericTimers) {
            Object.values(this.atmosphericTimers).forEach(timer => {
                if (timer) clearTimeout(timer);
            });
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        ['falling-leaves', 'dust-particles'].forEach(id => {
            const container = document.getElementById(id);
            if (container) {
                container.innerHTML = '';
            }
        });
    }

    // –≠—Ñ—Ñ–µ–∫—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    materializeContainer(container, type) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        container.classList.add('materializing');
        
        // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const wave = document.createElement('div');
        wave.className = 'materialize-wave';
        container.appendChild(wave);
        
        // –°–æ–∑–¥–∞–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã
        this.createEnergyParticles(container, type);
        
        // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            container.classList.remove('materializing');
            if (wave.parentNode) {
                wave.parentNode.removeChild(wave);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
            container.style.boxShadow = '0 0 30px rgba(255, 255, 255, 0.8)';
            setTimeout(() => {
                container.style.boxShadow = '';
            }, 1000);
        }, 2000);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏—Ö —á–∞—Å—Ç–∏—Ü
    createEnergyParticles(container, type) {
        const particleColors = {
            glass: 'cyan',
            battery: 'red', 
            metal: 'gray',
            plastic: 'blue',
            paper: 'yellow',
            organic: 'green'
        };
        
        const particleColor = particleColors[type] || 'blue';
        const particleCount = 12;
        
        for (let i = 0; i < particleCount; i++) {
            setTimeout(() => {
                const particle = document.createElement('div');
                particle.className = `energy-particle ${particleColor}`;
                
                // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–æ–∫—Ä—É–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                const angle = (i / particleCount) * 2 * Math.PI;
                const radius = 40 + Math.random() * 20;
                const x = Math.cos(angle) * radius;
                const y = Math.sin(angle) * radius;
                
                particle.style.left = `calc(50% + ${x}px)`;
                particle.style.top = `calc(50% + ${y}px)`;
                
                // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
                particle.style.animationDelay = Math.random() * 0.5 + 's';
                
                container.appendChild(particle);
                
                // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                setTimeout(() => {
                    if (particle.parentNode) {
                        particle.parentNode.removeChild(particle);
                    }
                }, 1500);
            }, i * 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç–∏—Ü–∞–º–∏
        }
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    updateColorScheme() {
        const root = document.documentElement;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
        let levelPrefix;
        if (this.currentLevel === 1) {
            levelPrefix = 'level1';
        } else if (this.currentLevel === 2) {
            levelPrefix = 'level2';
        } else {
            levelPrefix = 'level3';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        root.style.setProperty('--current-primary', `var(--${levelPrefix}-primary)`);
        root.style.setProperty('--current-secondary', `var(--${levelPrefix}-secondary)`);
        root.style.setProperty('--current-accent', `var(--${levelPrefix}-accent)`);
        root.style.setProperty('--current-bg', `var(--${levelPrefix}-bg)`);
        root.style.setProperty('--current-particle', `var(--${levelPrefix}-particle)`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ü–≤–µ—Ç–∞
        this.createColorTransitionEffect();
        
        console.log(`–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ${this.currentLevel} (${levelPrefix})`);
    }

    // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ü–≤–µ—Ç–∞
    createColorTransitionEffect() {
        // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω—É —Ü–≤–µ—Ç–∞ –ø–æ —ç–∫—Ä–∞–Ω—É
        const colorWave = document.createElement('div');
        colorWave.style.cssText = `
            position: fixed;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: var(--current-primary);
            opacity: 0.3;
            z-index: 1000;
            pointer-events: none;
            animation: colorWaveAnimation 1.5s ease-out forwards;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –≤–æ–ª–Ω—ã —Ü–≤–µ—Ç–∞
        const style = document.createElement('style');
        style.textContent = `
            @keyframes colorWaveAnimation {
                0% {
                    left: -100%;
                    opacity: 0.3;
                }
                50% {
                    left: 0%;
                    opacity: 0.5;
                }
                100% {
                    left: 100%;
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
        document.body.appendChild(colorWave);
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (colorWave.parentNode) {
                colorWave.parentNode.removeChild(colorWave);
            }
            if (style.parentNode) {
                style.parentNode.removeChild(style);
            }
        }, 1500);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const game = new SortingGame();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.game = game;
}); 